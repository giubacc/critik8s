###############################################################################
# RWO rule
#
# The rule emits a critic when a Node fails and the failed node
# was running Pod(s) with attached RWO PVC(s).
#
###############################################################################
# Subscripts allowed
#
# - { path }
#
# Use `{ ... }` subscript to specify an absolute path in the rule yaml.
#
# Examples:
#   - { ruleSteps[0].resource }
#
# - {{ path }}
#
# Use `{{ ... }}` subscript to specify a path in the input yaml.
#
# - {{ path }}  denotes an absolute path
# - {{ .path }} denotes a relative path when there is an opened context
#
# - [ mapName[key] ]
#
# Use `[ mapName[key] ]` subscript to specify a key in the map named 'mapName'.
#
#
# - [ setName[index] ]
#
# Use `[ setName[index] ]` subscript to specify an element in the set named 'setName'.
#

name: RWO

criticEntities:
  - resource: Node
    idSet:
      - id: metadata.name
        alias: Name
  - resource: Pod
    idSet:
      - id: metadata.namespace
        alias: Namespace
      - id: metadata.name
        alias: Name
  - resource: PersistentVolumeClaim
    idSet:
      - id: metadata.namespace
        alias: Namespace
      - id: metadata.name
        alias: Name

ruleSteps:
  - name: Node
    resource: Node
    triggerBy:
      frequency: 10s
    conditions:
      # conditions are "AND" evaluated (c1 && c2 && ...)
      - name: status
        context: status.conditions
        selectArrayItemBy:
          # selectors are "AND" evaluated (s1 && s2 && ...)
          - property: type
            operator: eq
            value: Ready

        matchDefinition:
          # match items are "AND" evaluated (m1 && m2 && ...)
          matchList:
            - property: status
              operator: ne
              value: "True"

          onMatchMapItems:
            - map: nodeInfo
              items:
                - property: "{{ status.addresses[0].address }}"
                  withKey: nodeAddress
    actions:
      - evaluateStep: Pod

  - name: Pod
    resource: Pod
    triggerBy:
      onDemand:
    filters:
      - name: filterByNodeAddress
        context: status
        clauses:
          - property: status
            operator: eq
            value: "[nodeInfo[nodeAddress]]"
    conditions:
      # conditions are "AND" evaluated (c1 && c2 && ...)
      - name: PVC
        context: spec.volumes
        selectArrayItemBy:
          # selectors are all AND evaluated (s1 && s2 && ...)
          - property: persistentVolumeClaim
            operator: exists

        matchDefinition:
          matchList:
            all: true
          onMatchCollectItems:
            - set: pvcSet
              items:
                - property: "{{ .persistentVolumeClaim.claimName }}"
    actions:
      - evaluateStep: PVC

  - name: PVC
    resource: PersistentVolumeClaim
    triggerBy:
      onDemand:
    filters:
      - name: filterBySet
        context: metadata
        clauses:
          - property: name
            operator: in
            set: pvcSet
    conditions:
      # conditions are "AND" evaluated (c1 && c2 && ...)
      - name: RWO
        context: spec

        matchDefinition:
          # match items are "AND" evaluated (m1 && m2 && ...)
          matchList:
            - property: accessModes[0]
              operator: eq
              value: ReadWriteOnce

    actions:
      - emit:
        - critic: Node
        - critic: Pod
        - critic: PersistentVolumeClaim
